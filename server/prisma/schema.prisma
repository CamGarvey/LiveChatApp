// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement()) @map("id")
  email                  String          @unique
  name                   String?
  username               String          @unique
  friends                User[]          @relation("Friends")
  friendsOf              User[]          @relation("Friends")
  chatsCreated           Chat[]          @relation("ChatCreatedBy")
  memberOfChats          Chat[]          @relation("ChatMembers")
  messages               Message[]       @relation("MessageCreatedBy")
  likedMessages          Message[]       @relation("MessageLikedBy")
  adminOfChats           Chat[]          @relation("ChatAdmins")
  chatUpdates            ChatUpdate[]
  updatedAt              DateTime        @updatedAt
  createdAt              DateTime        @default(now())
  receivedFriendRequests FriendRequest[]
  sentFriendRequests     FriendRequest[] @relation("FriendRequestCreated")
  sentChatInvites        ChatInvite[]    @relation("ChatInvitesCreated")
  receivedChatInvites    ChatInvite[]
}

model FriendRequest {
  id          Int           @id @default(autoincrement())
  recipient   User          @relation(fields: [recipientId], references: [id])
  recipientId Int
  createdBy   User          @relation("FriendRequestCreated", fields: [createdById], references: [id])
  createdById Int
  status      RequestStatus @default(SENT)
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?

  @@unique([recipientId, createdById]) // Only allow one request invite per user/user pair
}

model ChatInvite {
  id          Int           @id @default(autoincrement())
  recipient   User          @relation(fields: [recipientId], references: [id])
  recipientId Int
  createdBy   User          @relation("ChatInvitesCreated", fields: [createdById], references: [id])
  createdById Int
  chat        Chat          @relation("ChatInvites", fields: [chatId], references: [id])
  chatId      Int
  status      RequestStatus @default(SENT)
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())

  @@unique([recipientId, chatId]) // Only allow one chat invite per user/chat pair
}

enum RequestStatus {
  SENT
  SEEN
  CANCELLED
  ACCEPTED
  DECLINED
}

model Chat {
  id          Int          @id @default(autoincrement())
  name        String?
  description String?
  createdBy   User         @relation("ChatCreatedBy", fields: [createdById], references: [id])
  createdById Int
  isDM        Boolean
  members     User[]       @relation("ChatMembers")
  admins      User[]       @relation("ChatAdmins")
  messages    Message[]    @relation("ChatMessages")
  updates     ChatUpdate[]
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  invites     ChatInvite[] @relation("ChatInvites")
}

model ChatUpdate {
  id               Int      @id @default(autoincrement())
  chat             Chat     @relation(fields: [chatId], references: [id])
  chatId           Int
  name             String?
  description      String?
  memberIdsAdded   Int[]
  memberIdsRemoved Int[]
  adminIdsAdded    Int[]
  adminIdsRemoved  Int[]
  createdAt        DateTime @default(now())
  createdBy        User     @relation(fields: [createdById], references: [id])
  createdById      Int
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  chat        Chat      @relation("ChatMessages", fields: [chatId], references: [id])
  chatId      Int
  likedBy     User[]    @relation("MessageLikedBy")
  createdBy   User      @relation("MessageCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now()) // date message was created in db
  deletedAt   DateTime?
}
