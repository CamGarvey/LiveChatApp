// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String?
  username       String       @unique
  friends        User[]       @relation("Friends")
  friendsOf      User[]       @relation("Friends")
  likedMessages  Message[]    @relation("MessageLikedBy")
  memberOfChats  Chat[]       @relation("ChatMembers")
  adminOfChats   Chat[]       @relation("ChatAdmins")
  creatorOfChats Chat[]       @relation("ChatCreatedBy")
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
  alerts         Alert[]      @relation("AlertsReceived")
  alertsSeen     Alert[]      @relation("AlertsSeen")
  alertsSent     Alert[]      @relation("AlertsSent")
  requests       Request[]    @relation("RequestsReceived")
  requestsSent   Request[]    @relation("RequestsSent")
  chatUpdates    ChatUpdate[]
  eventsCreated  Event[]      @relation("EventsCreated")

  @@index([username])
  @@index([email])
}

// Request is a type of notification that requires action
// They have a single recipient 
model Request {
  id          Int          @id @default(autoincrement())
  type        RequestType
  state       RequestState @default(SENT)
  recipient   User         @relation("RequestsReceived", fields: [recipientId], references: [id])
  recipientId Int
  createdBy   User         @relation("RequestsSent", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime     @unique @default(now())
  alert       Alert?

  @@unique([recipientId, createdById, type])
}

enum RequestState {
  SENT
  SEEN
  CANCELLED
  ACCEPTED
  DECLINED
}

enum RequestType {
  FRIEND_REQUEST
}

// Alert is a type of notifcation that does not require action
// They can have multiple recipients
model Alert {
  id          Int       @id @default(autoincrement())
  type        AlertType
  recipients  User[]    @relation("AlertsReceived")
  seenBy      User[]    @relation("AlertsSeen")
  createdBy   User      @relation("AlertsSent", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime  @unique @default(now())
  chat        Chat?     @relation(fields: [chatId], references: [id])
  chatId      Int?
  request     Request?  @relation(references: [id], fields: [requestId], onDelete: Cascade)
  requestId   Int?      @unique

  @@index([createdById])
  @@index([chatId])
  @@index([requestId])
  @@index([type])
}

enum AlertType {
  FRIEND_DELETED
  CHAT_CREATED
  CHAT_DELETED
  REQUEST_ACCEPTED
  REQUEST_DECLINED
  CHAT_MEMBER_ACCESS_GRANTED
  CHAT_MEMBER_ACCESS_REVOKED
  CHAT_ADMIN_ACCESS_GRANTED
  CHAT_ADMIN_ACCESS_REVOKED
}

model Chat {
  id          Int       @id @default(autoincrement())
  type        ChatType
  name        String?
  description String?
  createdBy   User      @relation("ChatCreatedBy", fields: [createdById], references: [id])
  createdById Int
  members     User[]    @relation("ChatMembers")
  admins      User[]    @relation("ChatAdmins")
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  event       Event[]   @relation("ChatEvents")
  alerts      Alert[]
}

enum ChatType {
  DIRECT_MESSAGE
  GROUP
}

model Event {
  id          Int         @id @default(autoincrement())
  type        EventType
  chat        Chat        @relation("ChatEvents", fields: [chatId], references: [id])
  chatId      Int
  createdBy   User        @relation("EventsCreated", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  message     Message?
  chatUpdate  ChatUpdate?
}

enum EventType {
  MESSAGE
  CHAT_UPDATE
}

model Message {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int    @unique
  content String
  likedBy User[] @relation("MessageLikedBy")

  @@id([eventId])
}

model ChatUpdate {
  event             Event          @relation(fields: [eventId], references: [id])
  eventId           Int            @unique
  type              ChatUpdateType
  nameBefore        String?
  nameAfter         String?
  descriptionBefore String?
  descriptionAfter  String?
  users             User[]

  @@id([eventId])
}

enum ChatUpdateType {
  MEMBERS_ADDED
  MEMBERS_REMOVED
  ADMINS_ADDED
  ADMINS_REMOVED
  NAME_UPDATED
  DESCRIPTION_UPDATED
}
