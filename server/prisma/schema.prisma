// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement()) @map("id")
  email             String         @unique
  name              String?
  username          String         @unique
  friends           User[]         @relation("Friends")
  friendsOf         User[]         @relation("Friends")
  likedMessages     Message[]      @relation("MessageLikedBy")
  memberOfChats     Chat[]         @relation("ChatMembers")
  adminOfChats      Chat[]         @relation("ChatAdmins")
  creatorOfChats    Chat[]         @relation("ChatCreatedBy")
  updatedAt         DateTime       @updatedAt
  createdAt         DateTime       @default(now())
  notifications     Notification[] @relation("NotificationsReceived")
  notificationsSent Notification[] @relation("NotificationsSent")
  eventsCreated     Event[]        @relation("EventsCreated")
  chatUpdates       ChatUpdate[]
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  recipient   User             @relation("NotificationsReceived", fields: [recipientId], references: [id])
  recipientId Int
  createdBy   User             @relation("NotificationsSent", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime         @default(now())
  alert       Alert?
  request     Request?
}

enum NotificationType {
  Alert
  Request
}

/// Alert is a type of notification that does not request action
model Alert {
  type           AlertType
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int          @unique
  status         AlertStatus  @default(SENT)
  chat           Chat         @relation(fields: [chatId], references: [id])
  chatId         Int

  @@id([notificationId])
}

enum AlertType {
  NewFriend
  GroupChatCreated
}

enum AlertStatus {
  SENT
  SEEN
  CANCELLED
}

/// Request is a type of notification that requires action
model Request {
  notification   Notification  @relation(fields: [notificationId], references: [id])
  notificationId Int           @unique
  type           RequestType
  status         RequestStatus @default(SENT)

  @@id([notificationId])
}

enum RequestType {
  FriendRequest
}

enum RequestStatus {
  SENT
  SEEN
  CANCELLED
  ACCEPTED
  DECLINED
}

model Chat {
  id          Int       @id @default(autoincrement())
  type        ChatType
  name        String?
  description String?
  createdBy   User      @relation("ChatCreatedBy", fields: [createdById], references: [id])
  createdById Int
  members     User[]    @relation("ChatMembers")
  admins      User[]    @relation("ChatAdmins")
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  event       Event[]   @relation("ChatEvents")
  alert       Alert[]
}

enum ChatType {
  DirectMessageChat
  GroupChat
}

model Event {
  id          Int         @id @default(autoincrement())
  type        EventType
  chat        Chat        @relation("ChatEvents", fields: [chatId], references: [id])
  chatId      Int
  createdBy   User        @relation("EventsCreated", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  message     Message?
  chatUpdate  ChatUpdate?
}

enum EventType {
  Message
  ChatUpdate
}

model Message {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int    @unique
  content String
  likedBy User[] @relation("MessageLikedBy")

  @@id([eventId])
}

model ChatUpdate {
  event             Event          @relation(fields: [eventId], references: [id])
  eventId           Int            @unique
  type              ChatUpdateType
  nameBefore        String?
  nameAfter         String?
  descriptionBefore String?
  descriptionAfter  String?
  users             User[]

  @@id([eventId])
}

enum ChatUpdateType {
  MembersAdded
  MembersRemoved
  AdminsAdded
  AdminsRemoved
  NameUpdated
  DescriptionUpdated
}
