// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement()) @map("id")
  email                 String         @unique
  name                  String?
  username              String         @unique
  friends               User[]         @relation("Friends")
  friendsOf             User[]         @relation("Friends")
  chatsCreated          Chat[]         @relation("ChatCreatedBy")
  memberOfChats         Chat[]         @relation("ChatMembers")
  messages              Message[]      @relation("MessageCreatedBy")
  likedMessages         Message[]      @relation("MessageLikedBy")
  adminOfChats          Chat[]         @relation("ChatAdmins")
  chatUpdates           ChatUpdate[]
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[]
  updatedAt             DateTime       @updatedAt
  createdAt             DateTime       @default(now())
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  recipients  User[]
  createdBy   User             @relation("SentNotifications", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  deletedAt   DateTime?
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND
}

model Chat {
  id          Int          @id @default(autoincrement())
  name        String?
  description String?
  createdBy   User         @relation("ChatCreatedBy", fields: [createdById], references: [id])
  createdById Int
  isDM        Boolean
  members     User[]       @relation("ChatMembers")
  admins      User[]       @relation("ChatAdmins")
  messages    Message[]    @relation("ChatMessages")
  updates     ChatUpdate[]
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
}

model ChatUpdate {
  id               Int      @id @default(autoincrement())
  chat             Chat     @relation(fields: [chatId], references: [id])
  chatId           Int
  name             String?
  description      String?
  memberIdsAdded   String[]
  memberIdsRemoved String[]
  createdAt        DateTime @default(now())
  createdBy        User     @relation(fields: [createdById], references: [id])
  createdById      Int
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  chat        Chat      @relation("ChatMessages", fields: [chatId], references: [id])
  chatId      Int
  likedBy     User[]    @relation("MessageLikedBy")
  createdBy   User      @relation("MessageCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
}
