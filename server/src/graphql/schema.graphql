### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
Alert is a type of notification that does not require a response
    and can be sent to multiple users
"""
interface Alert implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

enum AlertState {
  ALL
  UNSEEN
}

"""Chat interface"""
interface Chat {
  """Time of creation"""
  createdAt: Date

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date
}

"""An alert about chat access changes"""
interface ChatAccessAlert implements Alert & Notification {
  """Chat associated with alert"""
  chat: Chat!

  """Id of chat associated with alert"""
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

type ChatAdminAccessGrantedAlert implements Alert & ChatAccessAlert & Notification {
  """Chat associated with alert"""
  chat: Chat!

  """Id of chat associated with alert"""
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

type ChatAdminAccessRevokedAlert implements Alert & ChatAccessAlert & Notification {
  """Chat associated with alert"""
  chat: Chat!

  """Id of chat associated with alert"""
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

type ChatDeletedAlert implements Alert & Notification {
  chat: Chat!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

"""A chat member"""
type ChatMember implements Member {
  """User that added this member into the chat"""
  addedBy: User!

  """Id of user that added this member into the chat"""
  addedById: HashId!

  """Chat associated with member"""
  chat: Chat!

  """Id of chat assiociated with member"""
  chatId: HashId!

  """Role of member in chat"""
  role: Role!

  """User associated with member"""
  user: User!

  """Id of user assiociated with member"""
  userId: HashId!
}

type ChatMemberAccessGrantedAlert implements Alert & ChatAccessAlert & Notification {
  """Chat associated with alert"""
  chat: Chat!

  """Id of chat associated with alert"""
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

type ChatMemberAccessRevokedAlert implements Alert & ChatAccessAlert & Notification {
  """Chat associated with alert"""
  chat: Chat!

  """Id of chat associated with alert"""
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
}

union ChatSubscriptionResult = DeletedChat | DirectMessageChat | GroupChat

"""Event involving an update within chat"""
interface ChatUpdateEvent implements Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date!
}

input CreateGroupChatInput {
  """Short description of the group chat"""
  description: String

  """Ids of the users to be added to group chat"""
  memberIds: [HashId!]

  """Name of the chat"""
  name: String!
}

"""Date custom scalar type"""
scalar Date

"""A chat that has been deleted"""
type DeletedChat implements Chat {
  """Time of creation"""
  createdAt: Date

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!
  deletedAt: Date!

  """Id of chat"""
  id: HashId!

  """Are you the creator?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date
}

"""A deleted event"""
type DeletedEvent implements Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Time event was deleted"""
  deletedAt: Date!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date!
}

"""A member that as been deleted"""
type DeletedMember implements Member {
  """User that added this member into the chat"""
  addedBy: User!

  """Id of user that added this member into the chat"""
  addedById: HashId!

  """Chat associated with member"""
  chat: Chat!

  """Id of chat assiociated with member"""
  chatId: HashId!

  """User that deleted this member from the chat"""
  deletedBy: User!

  """Id of user that deleted this member from the chat"""
  deletedById: HashId!

  """Role of member in chat"""
  role: Role!

  """User associated with member"""
  user: User!

  """Id of user assiociated with member"""
  userId: HashId!
}

"""Chat description updated event"""
type DescriptionUpdatedEvent implements ChatUpdateEvent & Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!
  descriptionAfter: String!
  descriptionBefore: String!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date!
}

"""A direct message chat is a conversation between 2 members"""
type DirectMessageChat implements Chat {
  """Time of creation"""
  createdAt: Date

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Events in chat"""
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!

  """Other user involved in direct message conversation"""
  friend: User!

  """Id of chat"""
  id: HashId!

  """Are you the creator?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date
}

"""A chat event"""
interface Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!

  """Time of last update"""
  updatedAt: Date!
}

type EventConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [EventEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type EventEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Event
}

type Friend implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type FriendConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FriendEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FriendDeletedAlert implements Alert & Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!
  user: Stranger!
}

type FriendEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Friend
}

type FriendRequest implements Notification & Request {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

"\n    A group chat can involve two or more members, can have a name, a description and members can be given roles."
type GroupChat implements Chat {
  """Time of creation"""
  createdAt: Date

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Group chat description"""
  description: String

  """Events in chat"""
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!

  """Id of chat"""
  id: HashId!

  """Are you the creator?"""
  isCreator: Boolean!

  """Number of members in the chat"""
  memberCount: Int!

  """Members in chat"""
  members(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MemberConnection!

  """Group chat name"""
  name: String!

  """Your role in the chat"""
  role: Role!

  """Time of last update"""
  updatedAt: Date
}

scalar HashId

interface KnownUser {
  chats: [Chat!]!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
}

type Me implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  requests(state: RequestState): [Request!]!
  sentRequests(state: RequestState): [Request!]!
  updatedAt: Date!
  username: String!
}

"""Member of chat"""
interface Member {
  """User that added this member into the chat"""
  addedBy: User!

  """Id of user that added this member into the chat"""
  addedById: HashId!

  """Chat associated with member"""
  chat: Chat!

  """Id of chat assiociated with member"""
  chatId: HashId!

  """Role of member in chat"""
  role: Role!

  """User associated with member"""
  user: User!

  """Id of user assiociated with member"""
  userId: HashId!
}

"""Event involving alterations of member/s in chat"""
interface MemberAlterationEvent implements ChatUpdateEvent & Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!
  members: [Member!]!

  """Time of last update"""
  updatedAt: Date!
}

type MemberConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MemberEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MemberEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Member
}

"""Members added to chat event"""
type MembersAddedEvent implements ChatUpdateEvent & Event & MemberAlterationEvent {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!
  members: [Member!]!

  """Time of last update"""
  updatedAt: Date!
}

"""Members removed from chat event"""
type MembersRemovedEvent implements ChatUpdateEvent & Event & MemberAlterationEvent {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!
  members: [Member!]!

  """Time of last update"""
  updatedAt: Date!
}

"""Message event"""
type MessageEvent implements Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Content of message"""
  content: String!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!

  """Users that liked this message"""
  likedBy: [User!]!

  """Time of last update"""
  updatedAt: Date!
}

type Mutation {
  """Accept a request"""
  acceptRequest(requestId: HashId!): Request

  "\n    By acknowledging an alert, you'll be removed from the recipients.\n    The alert will be deleted if all recipients have acknowledged it"
  acknowledgeAlert(alertId: HashId!): Alert

  """Add members to a group chat"""
  addMembers(
    """Id of the chat"""
    chatId: HashId!

    """Ids of members to be added into the chat"""
    members: [HashId!]!
  ): MembersAddedEvent

  """Cancel a sent request"""
  cancelRequest(requestId: HashId!): Request

  """Change the role of a list of members"""
  changeRole(
    """Id of the chat"""
    chatId: HashId!

    """Ids of the affected members"""
    members: [HashId!]!

    """New role for members"""
    role: Role!
  ): RoleChangedEvent

  """Create a direct message chat"""
  createDirectMessageChat(
    """Id of friend to create a Direct Message Chat with"""
    friendId: HashId!
  ): DirectMessageChat

  """Create a group chat"""
  createGroupChat(data: CreateGroupChatInput!): GroupChat

  """Create a message in a chat"""
  createMessage(
    """Id of chat to create message in"""
    chatId: HashId!

    """Content of message"""
    content: String!
  ): MessageEvent

  """Decline a received request"""
  declineRequest(requestId: HashId!): Request

  """Delete a chat"""
  deleteChat(
    """Id of chat to be deleted"""
    chatId: HashId!
  ): DeletedChat

  """A deleted event"""
  deleteEvent(
    """Id of event"""
    eventId: HashId
  ): DeletedEvent

  """Delete a Friend"""
  deleteFriend(friendId: HashId!): Stranger

  """Leave a group chat"""
  leaveGroupChat(
    """Id of the chat to leave"""
    chatId: HashId!
  ): MembersRemovedEvent

  """Remove members from a group chat"""
  removeMembers(
    """Id of the chat"""
    chatId: HashId!

    """Ids of members to be removed from the chat"""
    members: [HashId!]!
  ): MembersRemovedEvent

  """Send a friend request to a user"""
  sendFriendRequest(strangerId: HashId!): FriendRequest

  """Update the description of a group chat"""
  updateGroupChatDescription(
    """Id of chat to update"""
    chatId: HashId!

    """New description"""
    description: String!
  ): DescriptionUpdatedEvent

  """Update the name of group chat"""
  updateGroupChatName(
    """Id of chat to update"""
    chatId: HashId!

    """New name"""
    name: String!
  ): NameUpdatedEvent

  """Update a message"""
  updateMessage(
    """New content for message"""
    content: String!

    """Id of message to edit"""
    messageId: HashId!
  ): MessageEvent

  """Update current user"""
  updateUser(name: String!): Me
}

"""Chat name updated event"""
type NameUpdatedEvent implements ChatUpdateEvent & Event {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!
  nameAfter: String!
  nameBefore: String!

  """Time of last update"""
  updatedAt: Date!
}

interface Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  alerts: [Alert!]!

  """Get a chat by id"""
  chat(
    """Id of chat"""
    chatId: HashId!
  ): Chat

  """Get all chats you are a member in"""
  chats: [Chat!]!

  """Get a event by id"""
  event(
    """Id of event"""
    eventId: HashId!
  ): Event

  """Get events based on chat id"""
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Id of chat"""
    chatId: HashId!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!
  friends: [Friend!]!
  me: Me

  """Get Members based on chat id"""
  members(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Id of the chat"""
    chatId: HashId!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MemberConnection!

  """Get all notifications for current user"""
  notifications: [Notification!]!
  requests(state: RequestState): [Request!]!
  user(
    """id of user"""
    userId: HashId!
  ): User

  """Find users"""
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """How to order query"""
    orderBy: UserOrderBy

    """If set, filters users by given filter"""
    usernameFilter: String
  ): UserConnection!
}

"""
Request is a type of notification that requires a response 
    and is sent to a single user
"""
interface Request implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

type RequestAcceptedAlert implements Alert & Notification & RequestResponseAlert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!

  """Request associated with alert"""
  request: Request!

  """Id of request associated with alert"""
  requestId: HashId!
}

type RequestDeclinedAlert implements Alert & Notification & RequestResponseAlert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!

  """Request associated with alert"""
  request: Request!

  """Id of request associated with alert"""
  requestId: HashId!
}

"""A response alert for requests"""
interface RequestResponseAlert implements Alert & Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!

  """Users that recieved alert"""
  recipients: [User!]!

  """Request associated with alert"""
  request: Request!

  """Id of request associated with alert"""
  requestId: HashId!
}

enum RequestState {
  ACCEPTED
  CANCELLED
  DECLINED
  SENT
}

"""Role of member in the chat"""
enum Role {
  ADMIN
  BASIC
  OWNER
}

"""Roles of members updated event"""
type RoleChangedEvent implements ChatUpdateEvent & Event & MemberAlterationEvent {
  """Chat associated with event"""
  chat: Chat!

  """Id of chat associated with event"""
  chatId: HashId!

  """Time of creation"""
  createdAt: Date!

  """User that created the chat"""
  createdBy: User!

  """Id of user that created the chat"""
  createdById: HashId!

  """Id of chat"""
  id: HashId!

  """Are you the creator of the chat?"""
  isCreator: Boolean!
  members: [Member!]!
  newRole: Role!

  """Time of last update"""
  updatedAt: Date!
}

enum Sort {
  asc
  desc
}

type Stranger implements User {
  createdAt: Date!
  friendRequest: FriendRequest
  id: HashId!
  mutualFriends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  name: String
  updatedAt: Date!
  username: String!
}

type Subscription {
  """Subscribe to alerts"""
  alerts: Alert

  """Subscribe to alerts"""
  chatAccessAlerts: ChatAccessAlert

  """Subscribe to created events in chat"""
  eventCreated(
    """Id of chat to subscribe to"""
    chatId: HashId
  ): Event

  """Subscribe to deleted events in chat"""
  eventDeleted(
    """Id of chat to subscribe to"""
    chatId: HashId
  ): DeletedEvent

  """Subscribe to updated events in chat"""
  eventUpdated(
    """Id of chat to subscribe to"""
    chatId: HashId
  ): Event

  """Subscribe to any created/updated/deleted events"""
  events(
    """Id of chat to subscribe to"""
    chatId: HashId
  ): Event

  """Subscribe to all types of notifications"""
  notifications: Notification

  """Subscribe to requests"""
  requests: Request
}

interface User {
  createdAt: Date!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}