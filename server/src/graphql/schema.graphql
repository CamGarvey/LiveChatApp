### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Chat implements IChat {
  createdBy: IUser
  createdById: ID!
  deletedAt: Date
  description: String
  id: ID!
  isCreator: Boolean!
  isDM: Boolean!
  memberCount: Int!
  members: [IUser!]!
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): IMessageConnection!
  name: String!
  updatedAt: Date
}

union ChatResult = Chat | DeletedChat

"""Date custom scalar type"""
scalar Date

type DeletedChat implements IChat {
  createdBy: IUser
  createdById: ID!
  deletedAt: Date
  description: String
  id: ID!
  isCreator: Boolean!
  isDM: Boolean!
  name: String!
  updatedAt: Date
}

type DeletedMessage implements IMessage {
  chat: IChat!
  chatId: String!
  createdAt: Date!
  createdBy: IUser!
  createdById: String!
  deletedAt: Date
  id: ID!
  isCreator: Boolean!
  updatedAt: Date!
}

type Friend implements IKnownUser & IUser {
  chats: [ChatResult!]!
  createdAt: Date!
  friendStatus: FriendStatus!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): IUserConnection!
  id: ID!
  name: String
  receivedFriendRequests: [IUser!]!
  updatedAt: Date!
  username: String!
}

enum FriendStatus {
  FRIEND
  NOT_FRIEND
  REQUEST_RECEIVED
  REQUEST_SENT
}

interface IChat {
  createdBy: IUser
  createdById: ID!
  deletedAt: Date
  description: String
  id: ID!
  isCreator: Boolean!
  isDM: Boolean!
  name: String!
  updatedAt: Date
}

interface IKnownUser {
  chats: [ChatResult!]!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): IUserConnection!
  receivedFriendRequests: [IUser!]!
}

interface IMessage {
  chat: IChat!
  chatId: String!
  createdAt: Date!
  createdBy: IUser!
  createdById: String!
  deletedAt: Date
  id: ID!
  isCreator: Boolean!
  updatedAt: Date!
}

type IMessageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [IMessageEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type IMessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: IMessage
}

interface IUser {
  createdAt: Date!
  friendStatus: FriendStatus!
  id: ID!
  name: String
  updatedAt: Date!
  username: String!
}

type IUserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [IUserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type IUserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: IUser
}

type Message implements IMessage {
  chat: IChat!
  chatId: String!
  content: String!
  createdAt: Date!
  createdBy: IUser!
  createdById: String!
  deletedAt: Date
  id: ID!
  isCreator: Boolean!
  likedBy: [IUser!]!
  updatedAt: Date!
}

union MessageResult = DeletedMessage | Message

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  ok: Boolean!
}

enum Sort {
  asc
  desc
}

type Stranger implements IUser {
  createdAt: Date!
  friendStatus: FriendStatus!
  id: ID!
  name: String
  updatedAt: Date!
  username: String!
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}

union UserResult = Friend | Stranger