### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AdminsAddedEvent implements ChatUpdateEvent & Event & UserAlterationEvent {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
  users: [User!]!
}

type AdminsRemovedEvent implements ChatUpdateEvent & Event & UserAlterationEvent {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
  users: [User!]!
}

"""
Alert is a type of notification that does not require a response
    and can be sent to multiple users
"""
interface Alert implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

enum AlertState {
  ALL
  SEEN
  UNSEEN
}

interface Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

interface ChatAccessAlert implements Alert & Notification {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatAdminAccessGrantedAlert implements Alert & ChatAccessAlert & Notification {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatAdminAccessRevokedAlert implements Alert & ChatAccessAlert & Notification {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatCreatedAlert implements Alert & Notification {
  chat: Chat!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatDeletedAlert implements Alert & Notification {
  chat: Chat!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatMemberAccessGrantedAlert implements Alert & ChatAccessAlert & Notification {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatMemberAccessRevokedAlert implements Alert & ChatAccessAlert & Notification {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

union ChatSubscriptionResult = DeletedChat | DirectMessageChat | GroupChat

interface ChatUpdateEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

input CreateGroupChatInput {
  """
  Short description of the group chat
  """
  description: String

  """
  Ids of the users to be added to group chat
  """
  memberIds: [HashId!]

  """
  Name of the chat
  """
  name: String!
}

"""
Date custom scalar type
"""
scalar Date

type DeletedChat implements Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

type DeletedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type DescriptionUpdatedEvent implements ChatUpdateEvent & Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  descriptionAfter: String!
  descriptionBefore: String!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

"""
A Direct Message Chat is a conversation between 2 members
"""
type DirectMessageChat implements Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  events(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): EventConnection!
  friend: Friend!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

interface Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type EventConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [EventEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type EventEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: Event
}

type Friend implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type FriendConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FriendEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FriendDeletedAlert implements Alert & Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  user: Stranger!
}

type FriendEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: Friend
}

type FriendRequest implements Notification & Request {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

"""
A Group Chat is a chat that contains more than 2 members
"""
type GroupChat implements Chat {
  admins: [User!]!
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  description: String
  events(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): EventConnection!
  id: HashId!
  isAdmin: Boolean!
  isCreator: Boolean!
  memberCount: Int!
  members: [User!]!
  name: String!
  updatedAt: Date
}

scalar HashId

interface KnownUser {
  chats: [Chat!]!
  friends(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): FriendConnection!
}

type Me implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  requests(state: RequestState): [Request!]!
  sentRequests(state: RequestState): [Request!]!
  updatedAt: Date!
  username: String!
}

type MembersAddedEvent implements ChatUpdateEvent & Event & UserAlterationEvent {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
  users: [User!]!
}

type MembersRemovedEvent implements ChatUpdateEvent & Event & UserAlterationEvent {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
  users: [User!]!
}

type MessageEvent implements Event {
  chat: Chat!
  chatId: HashId!
  content: String!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  likedBy: [User!]!
  updatedAt: Date!
}

type Mutation {
  """
  Accept a request
  """
  acceptRequest(requestId: HashId!): Request
  acknowledgeAlert(alertId: HashId!): Alert

  """
  Add admins to a group chat
  """
  addAdminsToGroupChat(
    chatId: HashId!

    """
    Ids of admins to be added to the chat
    """
    members: [HashId!]!
  ): AdminsAddedEvent

  """
  Add members to a group chat
  """
  addMembersToGroupChat(
    chatId: HashId!

    """
    Ids of members to be added into the chat
    """
    members: [HashId!]!
  ): MembersAddedEvent

  """
  Cancel a sent request
  """
  cancelRequest(requestId: HashId!): Request

  """
  Create a Chat
  """
  createDirectMessageChat(
    """
    Id of friend to create a Direct Message Chat with
    """
    friendId: HashId!
  ): DirectMessageChat

  """
  Create a Chat
  """
  createGroupChat(data: CreateGroupChatInput!): GroupChat

  """
  Create a Message in a Chat
  """
  createMessage(
    """
    Id of Chat to create Message in
    """
    chatId: HashId!

    """
    Content of Message
    """
    content: String!
  ): MessageEvent

  """
  Decline a received request
  """
  declineRequest(requestId: HashId!): Request

  """
  Delete a Chat
  """
  deleteChat(
    """
    Id of Chat to be deleted
    """
    chatId: HashId!
  ): DeletedChat
  deleteEvent(
    """
    Id of event
    """
    eventId: HashId
  ): DeletedEvent

  """
  Delete a Friend
  """
  deleteFriend(friendId: HashId!): Stranger
  leaveGroupChat(chatId: HashId!): MembersRemovedEvent

  """
  Remove admins from a group chat
  """
  removeAdminsFromGroupChat(
    chatId: HashId!

    """
    Ids of admins to be removed from the chat
    """
    members: [HashId!]!
  ): AdminsRemovedEvent

  """
  Remove members from a group chat
  """
  removeMembersFromGroupChat(
    chatId: HashId!

    """
    Ids of members to be removed from the chat
    """
    members: [HashId!]!
  ): MembersRemovedEvent

  """
  Send a friend request to a user
  """
  sendFriendRequest(strangerId: HashId!): FriendRequest
  updateGroupChatDescription(
    chatId: HashId!
    description: String!
  ): DescriptionUpdatedEvent
  updateGroupChatName(chatId: HashId!, name: String!): NameUpdatedEvent

  """
  Update a Message
  """
  updateMessage(
    """
    New content for Message
    """
    content: String!

    """
    Id of Message to edit
    """
    messageId: HashId!
  ): MessageEvent

  """
  Update current user
  """
  updateUser(name: String!): Me
}

type NameUpdatedEvent implements ChatUpdateEvent & Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  nameAfter: String!
  nameBefore: String!
  updatedAt: Date!
}

interface Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  alerts(state: AlertState! = UNSEEN): [Alert!]!
  chat(
    """
    Id of chat
    """
    chatId: HashId!
  ): Chat
  chats: [Chat!]!

  """
  Get a event by id
  """
  event(
    """
    id of event
    """
    eventId: HashId!
  ): Event
  events(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String
    chatId: HashId!

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): EventConnection!
  friends: [Friend!]!
  me: Me

  """
  Get all notifications for current user
  """
  notifications: [Notification!]!
  requests(state: RequestState): [Request!]!
  user(
    """
    id of user
    """
    userId: HashId!
  ): User

  """
  Find users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int

    """
    How to order query
    """
    orderBy: UserOrderBy

    """
    If set, filters users by given filter
    """
    usernameFilter: String
  ): UserConnection!
}

"""
Request is a type of notification that requires a response
    and is sent to a single user
"""
interface Request implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

type RequestAcceptedAlert implements Alert & Notification & RequestResponseAlert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  request: Request!
  requestId: HashId!
}

type RequestDeclinedAlert implements Alert & Notification & RequestResponseAlert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  request: Request!
  requestId: HashId!
}

interface RequestResponseAlert implements Alert & Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  request: Request!
  requestId: HashId!
}

enum RequestState {
  ACCEPTED
  CANCELLED
  DECLINED
  SEEN
  SENT
}

enum Sort {
  asc
  desc
}

type Stranger implements User {
  createdAt: Date!
  friendRequest: FriendRequest
  id: HashId!
  mutualFriends(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): FriendConnection!
  name: String
  updatedAt: Date!
  username: String!
}

type Subscription {
  """
  Subscribe to alerts
  """
  alerts: Alert

  """
  Subscribe to created events in chat
  """
  eventCreated(chatId: HashId): Event

  """
  Subscribe to deleted events in chat
  """
  eventDeleted(chatId: HashId): DeletedEvent

  """
  Subscribe to updated events in chat
  """
  eventUpdated(chatId: HashId): Event

  """
  Subscribe to any created/updated/deleted events
  """
  events(chatId: HashId): Event

  """
  Subscribe to all types of notifications
  """
  notifications: Notification

  """
  Subscribe to requests
  """
  requests: Request
}

interface User {
  createdAt: Date!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

interface UserAlterationEvent implements ChatUpdateEvent & Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
  users: [User!]!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}
