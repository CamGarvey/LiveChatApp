### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminsAdded implements Event {
  adminsAdded: [User!]!
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type AdminsRemoved implements Event {
  adminsRemoved: [User!]!
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

interface Alert implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

interface Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

union ChatSubscriptionResult = AdminsAdded | AdminsRemoved | DescriptionUpdated | DirectMessageChat | GroupChat | MembersAdded | MembersRemoved | NameUpdated

union ChatUpdate = AdminsAdded | AdminsRemoved | DescriptionUpdated | MembersAdded | MembersRemoved | NameUpdated

input CreateGroupChatInput {
  """Short description of the group chat"""
  description: String

  """Ids of the users to be added to group chat"""
  memberIds: [HashId!]

  """Name of the chat"""
  name: String!
}

"""Date custom scalar type"""
scalar Date

type DeletedChat implements Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

type DeletedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type DescriptionUpdated implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  descriptionAfter: String!
  descriptionBefore: String!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

"""A Direct Message Chat is a conversation between 2 members"""
type DirectMessageChat implements Chat {
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!
  friend: Friend!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

interface Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type EventConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [EventEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type EventEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Event
}

type Friend implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type FriendConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FriendEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FriendEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Friend
}

type FriendRequest implements Notification & Request {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  responses: [Response!]!
}

type FriendRequestResponse implements Notification & Response {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  request: Request!
  requestId: HashId!
  status: ResponseStatus!
}

"""A Group Chat is a chat that contains more than 2 members"""
type GroupChat implements Chat {
  adminIds: [HashId!]!
  admins: [User!]!
  createdAt: Date
  createdBy: User!
  createdById: HashId!
  description: String
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!
  id: HashId!
  isAdmin: Boolean!
  isCreator: Boolean!
  memberCount: Int!
  members: [User!]!
  name: String!
  updatedAt: Date
}

type GroupChatCreated implements Alert & Notification {
  chat: Chat!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

scalar HashId

interface KnownUser {
  chats: [Chat!]!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
}

type Me implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type MembersAdded implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  membersAdded: [User!]!
  updatedAt: Date!
}

type MembersRemoved implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  membersRemoved: [User!]!
  updatedAt: Date!
}

type Message implements Event {
  chat: Chat!
  chatId: HashId!
  content: String!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  likedBy: [User!]!
  updatedAt: Date!
}

type Mutation {
  """Accept a friend request"""
  acceptFriendRequest(friendRequestId: HashId!): FriendRequestResponse

  """Add admins to a group chat"""
  addAdminsToGroupChat(
    chatId: HashId!

    """Ids of admins to be added to the chat"""
    members: [HashId!]!
  ): AdminsAdded

  """Add members to a group chat"""
  addMembersToGroupChat(
    chatId: HashId!

    """Ids of members to be added into the chat"""
    members: [HashId!]!
  ): MembersAdded

  """Cancel/Delete a sent Friend Request"""
  cancelFriendRequest(friendRequestId: HashId!): FriendRequest

  """Create a Chat"""
  createDirectMessageChat(
    """Id of friend to create a Direct Message Chat with"""
    friendId: HashId!
  ): DirectMessageChat

  """Create a Chat"""
  createGroupChat(data: CreateGroupChatInput!): GroupChat

  """Create a Message in a Chat"""
  createMessage(
    """Id of Chat to create Message in"""
    chatId: HashId!

    """Content of Message"""
    content: String!
  ): Message

  """Decline a received Friend Request"""
  declineFriendRequest(friendRequestId: HashId!): FriendRequestResponse

  """Delete a Chat"""
  deleteChat(
    """Id of Chat to be deleted"""
    chatId: HashId!
  ): DeletedChat

  """Delete a Friend"""
  deleteFriend(friendId: HashId!): Stranger

  """Delete a Message"""
  deleteMessage(
    """Id of Message to delete"""
    messageId: HashId!
  ): DeletedEvent

  """Remove admins from a group chat"""
  removeAdminsFromGroupChat(
    chatId: HashId!

    """Ids of admins to be removed from the chat"""
    members: [HashId!]!
  ): AdminsRemoved

  """Remove members from a group chat"""
  removeMembersFromGroupChat(
    chatId: HashId!

    """Ids of members to be removed from the chat"""
    members: [HashId!]!
  ): MembersRemoved

  """Send a friend request to a user"""
  sendFriendRequest(friendId: HashId!): FriendRequest
  updateGroupChatDescription(chatId: HashId!, description: String!): DescriptionUpdated
  updateGroupChatName(chatId: HashId!, name: String!): NameUpdated

  """Update a Message"""
  updateMessage(
    """New content for Message"""
    content: String!

    """Id of Message to edit"""
    messageId: HashId!
  ): Message

  """Update current user"""
  updateUser(name: String!): Me
}

type NameUpdated implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  nameAfter: String!
  nameBefore: String!
  updatedAt: Date!
}

type NewFriendAlert implements Alert & Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

interface Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  chat(
    """Id of chat"""
    chatId: HashId!
  ): Chat
  chats: [Chat!]!
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    chatId: HashId!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): EventConnection!
  friendRequests(status: ResponseStatus): [FriendRequest!]!
  friends: [Friend!]!
  me: Me

  """Get a message by id"""
  message(
    """id of message"""
    messageId: HashId!
  ): Event
  notifications: [Notification!]!
  user(
    """id of user"""
    userId: HashId!
  ): User

  """Find users"""
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """How to order query"""
    orderBy: UserOrderBy

    """If set, filters users by given filter"""
    usernameFilter: String
  ): UserConnection!
}

interface Request implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  responses: [Response!]!
}

interface Response implements Notification {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  request: Request!
  requestId: HashId!
  status: ResponseStatus!
}

enum ResponseStatus {
  ACCEPTED
  DECLINED
  SEEN
}

enum Sort {
  asc
  desc
}

type Stranger implements User {
  createdAt: Date!
  friendRequest: FriendRequest
  id: HashId!
  mutualFriends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  name: String
  status: StrangerStatus!
  updatedAt: Date!
  username: String!
}

enum StrangerStatus {
  NO_REQUEST
  REQUEST_RECEIVED
  REQUEST_SENT
}

type Subscription {
  chatCreated: Chat
  chatDeleted: DeletedChat
  chatUpdated: ChatUpdate
  chats: ChatSubscriptionResult

  """Subscribe to created events in chat"""
  eventCreated(chatId: HashId): Event

  """Subscribe to deleted events in chat"""
  eventDeleted(chatId: HashId): Event

  """Subscribe to updated events in chat"""
  eventUpdated(chatId: HashId): Event

  """Subscribe to any created/updated/deleted events"""
  events(chatId: HashId): Event

  """Subscribe to friend requests"""
  friendRequests: FriendRequest
  friends: User

  """SUbscribe to created messages in chat"""
  messageCreated(chatId: HashId): Message

  """Subscribe to deleted messages in chat"""
  messageDeleted(chatId: HashId): DeletedEvent

  """Subscribe to updated messages in chat"""
  messageUpdated(chatId: HashId): Event

  """Subscribe to any created/updated/deleted messages"""
  messages(chatId: HashId): Event
  notifications: Notification

  """Subscribe to friend requests"""
  requests: Request
}

interface User {
  createdAt: Date!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}