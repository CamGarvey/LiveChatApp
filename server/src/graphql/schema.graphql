### This file was generated by Nexus Schema
### Do not make changes to this file directly


interface Chat {
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

input CreateGroupChatInput {
  """Short description of the group chat"""
  description: String

  """Ids of the users to be added to group chat"""
  memberIds: [HashId!]

  """Name of the chat"""
  name: String!
}

"""Date custom scalar type"""
scalar Date

type DeletedChat implements Chat {
  createdBy: User
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date
}

type DeletedMessage implements MessageInterface {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

"""A Direct Message Chat is a conversation between 2 members"""
type DirectMessageChat implements Chat {
  createdBy: KnownUser
  createdById: HashId!
  friend: Friend!
  id: HashId!
  isCreator: Boolean!
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageResultConnection!
  updatedAt: Date
}

type Friend implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type FriendConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FriendEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FriendEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Friend
}

enum FriendStatus {
  FRIEND
  NOT_FRIEND
  REQUEST_RECEIVED
  REQUEST_SENT
}

"""A Group Chat is a chat that contains more than 2 members"""
type GroupChat implements Chat {
  createdBy: User
  createdById: HashId!
  description: String
  id: HashId!
  isCreator: Boolean!
  memberCount: Int!
  members: [User!]!
  name: String!
  updatedAt: Date
}

scalar HashId

interface KnownUser {
  chats: [Chat!]!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
}

type Me implements KnownUser & User {
  chats: [Chat!]!
  createdAt: Date!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): FriendConnection!
  id: HashId!
  name: String
  receivedFriendRequests: [Stranger!]!
  updatedAt: Date!
  username: String!
}

type Message implements MessageInterface {
  chat: Chat!
  chatId: HashId!
  content: String!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date
  id: HashId!
  isCreator: Boolean!
  likedBy: [User!]!
  updatedAt: Date!
}

interface MessageInterface {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

union MessageResult = DeletedMessage | Message

type MessageResultConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MessageResultEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MessageResultEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: MessageResult
}

type Mutation {
  """Accept a Users friend request"""
  acceptFriendRequest(friendId: HashId!): Friend

  """Cancel/Delete a sent Friend Request"""
  cancelFriendRequest(friendId: HashId!): Stranger

  """Create a Chat"""
  createDirectMessageChat(
    """Id of friend to create a Direct Message Chat with"""
    friendId: HashId!
  ): DirectMessageChat

  """Create a Chat"""
  createGroupChat(data: CreateGroupChatInput): GroupChat

  """Create a Message in a Chat"""
  createMessage(
    """Id of Chat to create Message in"""
    chatId: HashId!

    """Content of Message"""
    content: String!
  ): Message

  """Delete/Decline a received Friend Request"""
  declineFriendRequest(friendId: HashId!): Stranger

  """Delete a Chat"""
  deleteChat(
    """Id of Chat to be deleted"""
    chatId: HashId!
  ): DeletedChat

  """Delete a Friend"""
  deleteFriend(friendId: HashId!): Stranger

  """Delete a Message"""
  deleteMessage(
    """Id of Message to delete"""
    messageId: HashId!
  ): Message

  """Send a friend request to a user"""
  sendFriendRequest(friendId: HashId!): Stranger

  """Update a Chat"""
  updateGroupChat(data: UpdateGroupChatInput): GroupChat

  """Update current user"""
  updateMe(email: String!, username: String!): Me

  """Update a Message"""
  updateMessage(
    """New content for Message"""
    content: String!

    """Id of Message to edit"""
    messageId: HashId!
  ): Message
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  chat(
    """Id of chat"""
    chatId: HashId!
  ): Chat
  chats: [Chat!]!
  friends: [Friend!]!
  me: Me

  """Get a message by id"""
  message(
    """id of message"""
    messageId: HashId!
  ): MessageResult
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    chatId: HashId!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageResultConnection!
  user(
    """id of user"""
    userId: HashId!
  ): User

  """Find users"""
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """How to order query"""
    orderBy: UserOrderBy

    """If set, filters users by given filter"""
    usernameFilter: String
  ): UserConnection!
}

enum Sort {
  asc
  desc
}

type Stranger implements User {
  createdAt: Date!
  friendStatus: FriendStatus!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type Subscription {
  chatCreated: Chat
  chatDeleted: DeletedChat
  chats: Chat

  """SUbscribe to deleted message in chat"""
  messageDeleted(chatId: HashId!): DeletedMessage

  """Subscribe to updated messages in chat"""
  messageUpdated(chatId: HashId!): MessageResult

  """Subscribe to any created/updated/deleted messages"""
  messages(chatId: HashId!): MessageResult

  """Subscribe to any changes to current user"""
  user: Me

  """Subscribe to new friends"""
  userFriendCreated: Me

  """Subscribe to unfriend events"""
  userFriendDeleted: Me

  """Subscribe to new friend requests"""
  userFriendRequestCreated: Me

  """Subscribe to deleted friend requests"""
  userFriendRequestDeleted: Me

  """Subscribe to any changes to the friend requests of the current user"""
  userFriendRequests: Me

  """
  Subscribe to any changes to
         the friendships of the current user (incl requests)
  """
  userFriends: Me
}

input UpdateGroupChatInput {
  """Ids of users to be add into the chat"""
  addMemberIds: [HashId!]

  """Id of chat to update"""
  chatId: HashId!

  """New description for chat"""
  description: String

  """New name for chat"""
  name: String

  """Ids of users to be removed from chat"""
  removeMemberIds: [HashId!]
}

interface User {
  createdAt: Date!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}