### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Channel {
  createBy: User!
  createdAt: Date!
  id: Int!
  isDM: Boolean!
  members: [User!]!
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageConnection!
  name: String!
  updatedAt: Date!
}

"""Date custom scalar type"""
scalar Date

type Message {
  channel: Channel!
  content: String!
  createdAt: Date!
  createdBy: User!
  createdById: Int!
  id: Int!
  likedBy: [User!]!
  updatedAt: Date!
}

type MessageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MessageEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Message
}

type Mutation {
  """Accept a Users friend request"""
  acceptFriendRequest(friendId: Int!): Boolean

  """Add Members into Channel"""
  addMembersToChannel(channelId: Int!, memberIds: [Int!]!): Channel

  """Create a Channel"""
  createChannel(
    """If the Channel should be private"""
    isPrivate: Boolean = true

    """Name of the Channel"""
    name: String!
  ): Channel

  """Create Direct Message Channel"""
  createDM: Channel

  """Create a Message in a Channel"""
  createMessage(
    """Id of Channel to create Message in"""
    channelId: Int!

    """Content of Message"""
    content: String!
  ): Message

  """Delete a Channel"""
  deleteChannel(
    """Id of Channel to be deleted"""
    channelId: Int!
  ): Boolean

  """Delete a Friend"""
  deleteFriend(friendId: Int!): Boolean

  """Delete a received Friend Request"""
  deleteFriendRequest(friendId: Int!): Boolean

  """Delete a Message"""
  deleteMessage(
    """Id of Message to delete"""
    messageId: Int!
  ): Message

  """Edit a Message"""
  editMessage(
    """New content for Message"""
    content: String!

    """Id of Message to edit"""
    messageId: Int!
  ): Message

  """Remove Members from Channel"""
  removeMembersFromChannel(channelId: Int!, membersIds: [Int!]!): Channel

  """Send a Friend Request to a User"""
  sendFriendRequest(friendId: Int!): Boolean

  """Update a Channel"""
  updateChannel(
    """Id of Channel to be updated"""
    channelId: Int!

    """If the Channel should be private"""
    isPrivate: Boolean

    """Name of Channel"""
    name: String
  ): Channel

  """Update current User"""
  updateUser(email: String!, username: String!): User
}

type NewMessagePayload {
  channelId: Int!
  message: Message!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  channelMessages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """If set, filters users by given filter"""
    channelId: Int!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageConnection!
  friends: [User!]!
  me: User
  user(
    """id of user"""
    id: Int!
  ): User
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """If set, filters users by given filter"""
    nameFilter: String

    """How to order query"""
    orderBy: UserOrderBy
  ): UserConnection!
}

enum Sort {
  asc
  desc
}

type Subscription {
  newFriend(userId: Int!): User
  newFriendRequest: User
  newMessage(channelId: Int!): NewMessagePayload
}

type User {
  channels: [Channel!]!
  createdAt: Date!
  email: String!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): UserConnection!
  id: Int!
  name: String!
  receivedFriendRequests: [User!]!
  sentFriendRequests: [User!]!
  updatedAt: Date!
  username: String
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}