### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Chat {
  createdAt: Date!
  createdBy: User!
  description: String
  id: ID!
  isDM: Boolean!
  memberCount: Int!
  members: [User!]!
  messages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageConnection!
  name: String!
  updatedAt: Date!
  updates: [ChatUpdate!]!
}

type ChatUpdate {
  chat: Chat!
  chatId: ID!
  createdAt: Date!
  createdBy: User
  createdById: ID!
  description: String
  id: ID!
  memberIdsAdded: [ID!]
  memberIdsRemoved: [ID!]
  membersAdded: [User!]
  membersRemoved: [User!]
  name: String
}

"""Date custom scalar type"""
scalar Date

enum FriendStatus {
  FRIEND
  NOT_FRIEND
  REQUEST_RECEIVED
  REQUEST_SENT
}

type Message {
  chat: Chat!
  chatId: ID!
  content: String!
  createdAt: Date!
  createdBy: User!
  createdById: String!
  id: ID!
  likedBy: [User!]!
  updatedAt: Date!
}

type MessageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MessageEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type MessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Message
}

type Mutation {
  """Accept a Users friend request"""
  acceptFriendRequest(friendId: String!): User

  """Add Members into Chat"""
  addMembersToChat(
    """Id of Chat to add Users to"""
    chatId: String!

    """Ids of Users to be added to Chat"""
    memberIds: [String!]!
  ): Chat

  """Cancel/Delete a sent Friend Request"""
  cancelFriendRequest(friendId: String!): User

  """Create a Chat"""
  createChat(
    """Description of Chat"""
    description: String

    """If the Chat should be private"""
    isPrivate: Boolean = true

    """Ids of Users to be added to Chat"""
    memberIds: [String!]

    """Name of the Chat"""
    name: String!
  ): Chat

  """Create a Message in a Chat"""
  createMessage(
    """Id of Chat to create Message in"""
    chatId: String!

    """Content of Message"""
    content: String!
  ): Message

  """Delete/Decline a received Friend Request"""
  declineFriendRequest(friendId: String!): User

  """Delete a Chat"""
  deleteChat(
    """Id of Chat to be deleted"""
    chatId: String!
  ): Boolean

  """Delete a Friend"""
  deleteFriend(friendId: String!): User

  """Delete a Message"""
  deleteMessage(
    """Id of Message to delete"""
    messageId: String!
  ): Message

  """Edit a Message"""
  editMessage(
    """New content for Message"""
    content: String!

    """Id of Message to edit"""
    messageId: String!
  ): Message

  """Remove Members from Chat"""
  removeMembersFromChat(chatId: String!, membersIds: [String!]!): Chat

  """Send a Friend Request to a User"""
  sendFriendRequest(friendId: String!): User

  """Update a Chat"""
  updateChat(
    """Ids of Users to be added to Chat"""
    addMembersId: [String!]

    """Id of Chat to be updated"""
    chatId: String!

    """Description of Chat"""
    description: String

    """If the Chat should be private"""
    isPrivate: Boolean

    """Name of Chat"""
    name: String

    """Ids of Users to be removed from Chat"""
    removeMembersId: [String!]
  ): Chat

  """Update current User"""
  updateUser(email: String!, username: String!): User
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  chat(
    """Id of chat"""
    chatId: String!
  ): Chat
  chatMessages(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """If set, filters users by given filter"""
    chatId: String!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): MessageConnection!
  chats: [Chat!]!
  friends: [User!]!
  me: User
  user(
    """id of user"""
    id: String!
  ): User

  """Find users"""
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """How to order query"""
    orderBy: UserOrderBy

    """If set, filters users by given filter"""
    usernameFilter: String
  ): UserConnection!
}

enum Sort {
  asc
  desc
}

type Subscription {
  chatUpdated(chatId: String!): ChatUpdate
  friendCreated(userId: String!): User
  friendRequestCreated: User
  friendRequestDeleted: User
  meChanged: User
  messageCreated(chatId: String!): Message
}

type User {
  chats: [Chat!]!
  createdAt: Date!
  email: String!
  friendStatus: FriendStatus!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): UserConnection!
  id: ID!
  name: String
  receivedFriendRequests: [User!]!
  sentFriendRequests: [User!]!
  updatedAt: Date!
  username: String!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderBy {
  createdAt: Sort
  email: Sort
  id: Sort
  name: Sort
  updatedAt: Sort
  username: Sort
}