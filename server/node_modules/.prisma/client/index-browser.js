
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AlertScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  createdById: 'createdById',
  createdAt: 'createdAt',
  chatId: 'chatId',
  requestId: 'requestId'
});

exports.Prisma.ChatScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  createdById: 'createdById',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
});

exports.Prisma.ChatUpdateScalarFieldEnum = makeEnum({
  eventId: 'eventId',
  type: 'type',
  nameBefore: 'nameBefore',
  nameAfter: 'nameAfter',
  descriptionBefore: 'descriptionBefore',
  descriptionAfter: 'descriptionAfter',
  newRole: 'newRole'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  chatId: 'chatId',
  createdById: 'createdById',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
});

exports.Prisma.MemberScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  role: 'role',
  addedById: 'addedById',
  createdAt: 'createdAt',
  removedAt: 'removedAt',
  removedById: 'removedById'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  eventId: 'eventId',
  content: 'content'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RequestScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  state: 'state',
  recipientId: 'recipientId',
  createdById: 'createdById',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  username: 'username',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
});
exports.AlertType = makeEnum({
  FRIEND_DELETED: 'FRIEND_DELETED',
  REQUEST_ACCEPTED: 'REQUEST_ACCEPTED',
  REQUEST_DECLINED: 'REQUEST_DECLINED',
  CHAT_ACCESS_REVOKED: 'CHAT_ACCESS_REVOKED',
  CHAT_ACCESS_GRANTED: 'CHAT_ACCESS_GRANTED',
  CHAT_ROLE_CHANGED: 'CHAT_ROLE_CHANGED',
  CHAT_DELETED: 'CHAT_DELETED'
});

exports.ChatType = makeEnum({
  DIRECT_MESSAGE: 'DIRECT_MESSAGE',
  GROUP: 'GROUP'
});

exports.ChatUpdateType = makeEnum({
  MEMBERS_ADDED: 'MEMBERS_ADDED',
  MEMBERS_REMOVED: 'MEMBERS_REMOVED',
  ROLE_CHANGED: 'ROLE_CHANGED',
  NAME_UPDATED: 'NAME_UPDATED',
  DESCRIPTION_UPDATED: 'DESCRIPTION_UPDATED'
});

exports.EventType = makeEnum({
  MESSAGE: 'MESSAGE',
  CHAT_UPDATE: 'CHAT_UPDATE'
});

exports.RequestState = makeEnum({
  SENT: 'SENT',
  CANCELLED: 'CANCELLED',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
});

exports.RequestType = makeEnum({
  FRIEND_REQUEST: 'FRIEND_REQUEST'
});

exports.Role = makeEnum({
  BASIC: 'BASIC',
  ADMIN: 'ADMIN',
  OWNER: 'OWNER'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Request: 'Request',
  Alert: 'Alert',
  Member: 'Member',
  Chat: 'Chat',
  Event: 'Event',
  Message: 'Message',
  ChatUpdate: 'ChatUpdate'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
